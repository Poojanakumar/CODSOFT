import java.util.HashMap;
import java.util.Map;

public class Main{

    public static void main(String[] args) {
        
        Map<String, int[]> movies = new HashMap<>();
        movies.put("Movie1", new int[]{1, 0, 1, 0, 1});
        movies.put("Movie2", new int[]{0, 1, 1, 1, 0});
        movies.put("Movie3", new int[]{1, 1, 0, 0, 1});
        movies.put("Movie4", new int[]{0, 1, 0, 1, 0});
        movies.put("Movie5", new int[]{1, 0, 0, 1, 1});

        int[] user = {1, 0, 1, 1, 0};

        Map<String, Double> similarities = new HashMap<>();
        for (Map.Entry<String, int[]> entry : movies.entrySet()) {
            double similarity = calculate(user, entry.getValue());
            similarities.put(entry.getKey(), similarity);
        }

        similarities.entrySet().stream()
                .sorted((entry1, entry2) -> Double.compare(entry2.getValue(), entry1.getValue()))
                .forEach(entry -> System.out.println(entry.getKey() + " - Similarity: " + entry.getValue()));
    }

    private static double calculate(int[] vectorA, int[] vectorB) {
        double Product = 0.0;
        double normA = 0.0;
        double normB = 0.0;

        for (int i = 0; i < vectorA.length; i++) {
            Product += vectorA[i] * vectorB[i];
            normA += Math.pow(vectorA[i], 2);
            normB += Math.pow(vectorB[i], 2);
        }

        if (normA == 0.0 || normB == 0.0) {
            return 0.0;
        }

        return Product / (Math.sqrt(normA) * Math.sqrt(normB));
    }
}
